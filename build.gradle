import com.vladsch.flexmark.html.HtmlRenderer
import com.vladsch.flexmark.parser.Parser
import com.vladsch.flexmark.util.ast.Document

buildscript {
    dependencies {
        classpath 'com.vladsch.flexmark:flexmark:0.62.2' // '0.28.12'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'org.jetbrains.intellij' version '0.7.3'
}


group = 'in.oneton.idea.spring'
version = '1.0.1'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    testCompileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {

    ['annotationProcessor', 'compileOnly', 'testAnnotationProcessor', 'testCompileOnly']
            .each { conf -> add(conf, 'org.projectlombok:lombok:1.18.20') }

    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'com.miguelfonseca.completely:completely-core:0.9.0'
    implementation 'com.vladsch.flexmark:flexmark:0.62.2'

    testImplementation(platform('org.junit:junit-bom:5.7.2'))
    testImplementation 'org.mockito:mockito-core:3.10.0'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
}

clean.doFirst {
    delete 'build', 'out'
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    type = 'IC'
    version = '2021.1.1'
    pluginName = 'intellij-spring-assistant'
    plugins = ['java', 'properties', 'yaml', 'maven', 'gradle']
    updateSinceUntilBuild false
}

publishPlugin {
    token System.getenv('IJ_PLUGIN_TOKEN')
//    username System.getProperty('ij_plugin_portal_login')
//    password System.getProperty('ij_plugin_portal_password')
    channels 'eap', 'nightly', 'default'
}


patchPluginXml {
    sinceBuild '203.1.0'
    untilBuild '211.*'
    pluginDescription readmeXmlAsHtml()
    changeNotes changeLogAsHtml()
}

String readmeXmlAsHtml() {
    final String readmeContent = new File(rootProject.uri('README.md')).text
    // since these images needs to shown from within intellij, lest put absolute urls so that the images & changelog will be visible
            .replaceAll("help\\.gif", "https://raw.githubusercontent.com/1tontech/intellij-spring-assistant/" + version + "/help.gif")
            .replaceAll("CHANGELOG.md", "https://github.com/1tontech/intellij-spring-assistant/blob/" + version + "/CHANGELOG.md")

    final Document readmeDocument = Parser.builder().build().parse(readmeContent)
    HtmlRenderer.builder().build().render(readmeDocument)
}

String changeLogAsHtml() {
    Parser parser = Parser.builder().build()
    HtmlRenderer renderer = HtmlRenderer.builder().build()
    Document changeLogDocument = parser.parse(new File(rootProject.uri('CHANGELOG.md')).text)
    renderer.render(changeLogDocument)
}

